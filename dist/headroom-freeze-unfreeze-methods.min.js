/*!
 * headroom.js-freeze-unfreeze-methods v1.0.0 - Extends Headroom.js plugin by adding methods to freeze/unfreeze the current headroom's state.
 * Copyright (c) 2019 Andrei Bulearca - https://github.com/andreivictor/headroom.js-freeze-unfreeze-methods#readme
 * License: MIT
 */


!function(e,o){"use strict";"function"==typeof define&&define.amd?define([],o):"object"==typeof exports?module.exports=o():e.Headroom=o()}(this,function(){"use strict";if("undefined"==typeof Headroom)throw new Error("Headroom must be included first!");Headroom.options=function e(o){if(arguments.length<=0)throw new Error("Missing arguments in extend function");var t,n,r,i=o||{};for(n=1;n<arguments.length;n++){var s=arguments[n]||{};for(t in s)"object"!=typeof i[t]||(r=i[t])&&"undefined"!=typeof window&&(r===window||r.nodeType)?i[t]=i[t]||s[t]:i[t]=e(i[t],s[t])}return i}({},Headroom.options,{classes:{frozen:"headroom--frozen"}}),Headroom.prototype.freeze=function(){!0!==this.frozen&&(this.frozen=!0,this.elem.classList.add(this.classes.frozen))},Headroom.prototype.unfreeze=function(){void 0!==this.frozen&&!1!==this.frozen&&(this.frozen=!1,this.elem.classList.remove(this.classes.frozen))};var o=Headroom.prototype.update;return Headroom.prototype.update=function(){var e=this.getScrollY();this.isOutOfBounds(e)||(!0!==this.frozen?o.apply(this):this.lastKnownScrollY=e)},Headroom});